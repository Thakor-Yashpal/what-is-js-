{"version":3,"sources":["what03.js"],"names":["self","pressKey","keymap","Keyboard","Keymap","document","onkeydown","event","which","getKey","Component","Stage","canvas","conf","keyEvent","ControllerEvents","width","height","length","food","score","direction","cw","size","fps","key","hasOwnProperty","Snake","stage","initSnake","i","push","x","y","initFood","Math","round","random","restart","Game","Draw","context","snake","drawStage","keyPress","fillStyle","fillRect","nx","ny","collision","tail","pop","unshift","cell","drawCell","fillText","beginPath","arc","PI","fill","elementId","getElementById","getContext","gameDraw","setInterval","window","onload"],"mappings":"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","sourcesContent":["let self = this;\r\nthis.pressKey = null;\r\nthis.keymap = Keyboard.Keymap;\r\n\r\n// Keydown Event\r\ndocument.onkeydown = function(event) {\r\n    self.pressKey = event.which;\r\n};\r\n\r\n// Get Key\r\nthis.getKey = function() {\r\n    return this.keymap[this.pressKey];\r\n};\r\n\r\n\r\n/**\r\n * Game Component Stage\r\n */\r\nComponent.Stage = function(canvas, conf) {\r\n\r\n    // Sets\r\n    this.keyEvent = new Keyboard.ControllerEvents();\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    this.length = [];\r\n    this.food = {};\r\n    this.score = 0;\r\n    this.direction = 'right';\r\n    this.conf = {\r\n        cw: 10,\r\n        size: 5,\r\n        fps: 1000\r\n    };\r\n\r\n    // Merge Conf\r\n    if (typeof conf == 'object') {\r\n        for (var key in conf) {\r\n            if (conf.hasOwnProperty(key)) {\r\n                this.conf[key] = conf[key];\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Game Component Snake\r\n */\r\nComponent.Snake = function(canvas, conf) {\r\n\r\n    // Game Stage\r\n    this.stage = new Component.Stage(canvas, conf);\r\n\r\n    // Init Snake\r\n    this.initSnake = function() {\r\n\r\n        // Itaration in Snake Conf Size\r\n        for (let i = 0; i < this.stage.conf.size; i++) {\r\n\r\n            // Add Snake Cells\r\n            this.stage.length.push({ x: i, y: 0 });\r\n        }\r\n    };\r\n\r\n    // Call init Snake\r\n    this.initSnake();\r\n\r\n    // Init Food  \r\n    this.initFood = function() {\r\n\r\n        // Add food on stage\r\n        this.stage.food = {\r\n            x: Math.round(Math.random() * (this.stage.width - this.stage.conf.cw) / this.stage.conf.cw),\r\n            y: Math.round(Math.random() * (this.stage.height - this.stage.conf.cw) / this.stage.conf.cw),\r\n        };\r\n    };\r\n\r\n    // Init Food\r\n    this.initFood();\r\n\r\n    // Restart Stage\r\n    this.restart = function() {\r\n        this.stage.length = [];\r\n        this.stage.food = {};\r\n        this.stage.score = 0;\r\n        this.stage.direction = 'right';\r\n        this.stage.keyEvent.pressKey = null;\r\n        this.initSnake();\r\n        this.initFood();\r\n    };\r\n};\r\n\r\n/**\r\n * Game Draw\r\n */\r\nGame.Draw = function(context, snake) {\r\n\r\n    // Draw Stage\r\n    this.drawStage = function() {\r\n\r\n        // Check Keypress And Set Stage direction\r\n        let keyPress = snake.stage.keyEvent.getKey();\r\n        if (typeof(keyPress) != 'undefined') {\r\n            snake.stage.direction = keyPress;\r\n        }\r\n\r\n        // Draw White Stage\r\n        context.fillStyle = \"white\";\r\n        context.fillRect(0, 0, snake.stage.width, snake.stage.height);\r\n\r\n        // Snake Position\r\n        let nx = snake.stage.length[0].x;\r\n        let ny = snake.stage.length[0].y;\r\n\r\n        // Add position by stage direction\r\n        switch (snake.stage.direction) {\r\n            case 'right':\r\n                nx++;\r\n                break;\r\n            case 'left':\r\n                nx--;\r\n                break;\r\n            case 'up':\r\n                ny--;\r\n                break;\r\n            case 'down':\r\n                ny++;\r\n                break;\r\n        }\r\n\r\n        // Check Collision\r\n        if (this.collision(nx, ny) == true) {\r\n            snake.restart();\r\n            return;\r\n        }\r\n\r\n        // Logic of Snake food\r\n        if (nx == snake.stage.food.x && ny == snake.stage.food.y) {\r\n            let tail = { x: nx, y: ny };\r\n            snake.stage.score++;\r\n            snake.initFood();\r\n        } else {\r\n            let tail = snake.stage.length.pop();\r\n            tail.x = nx;\r\n            tail.y = ny;\r\n        }\r\n        snake.stage.length.unshift(tail);\r\n\r\n        // Draw Snake\r\n        for (let i = 0; i < snake.stage.length.length; i++) {\r\n            let cell = snake.stage.length[i];\r\n            this.drawCell(cell.x, cell.y);\r\n        }\r\n\r\n        // Draw Food\r\n        this.drawCell(snake.stage.food.x, snake.stage.food.y);\r\n\r\n        // Draw Score\r\n        context.fillText('Score: ' + snake.stage.score, 5, (snake.stage.height - 5));\r\n    };\r\n\r\n    // Draw Cell\r\n    this.drawCell = function(x, y) {\r\n        context.fillStyle = 'rgb(170, 170, 170)';\r\n        context.beginPath();\r\n        context.arc((x * snake.stage.conf.cw + 6), (y * snake.stage.conf.cw + 6), 4, 0, 2 * Math.PI, false);\r\n        context.fill();\r\n    };\r\n\r\n    // Check Collision with walls\r\n    this.collision = function(nx, ny) {\r\n        if (nx == -1 || nx == (snake.stage.width / snake.stage.conf.cw) || ny == -1 || ny == (snake.stage.height / snake.stage.conf.cw)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Game Snake\r\n */\r\nGame.Snake = function(elementId, conf) {\r\n\r\n    // Sets\r\n    let canvas = document.getElementById(elementId);\r\n    let context = canvas.getContext(\"2d\");\r\n    let snake = new Component.Snake(canvas, conf);\r\n    let gameDraw = new Game.Draw(context, snake);\r\n\r\n    // Game Interval\r\n    setInterval(function() { gameDraw.drawStage(); }, snake.stage.conf.fps);\r\n};\r\n\r\n\r\n/**\r\n * Window Load\r\n */\r\nwindow.onload = function() {\r\n    var snake = new Game.Snake('stage', { fps: 100, size: 4 });\r\n};"],"file":"what03.dev.js"}