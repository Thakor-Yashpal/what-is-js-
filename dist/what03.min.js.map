{"version":3,"sources":["what03.js"],"names":["self","pressKey","keymap","Keyboard","Keymap","document","event","which","getKey","this","Component","Stage","canvas","conf","keyEvent","width","height","length","food","score","direction","fps","_typeof","key","hasOwnProperty","Snake","stage","initSnake","push","size","i","x","y","initFood","random","Math","round","cw","restart","Game","Draw","drawStage","context","snake","keyPress","nx","ny","collision","tail","pop","unshift","cell","drawCell","fillText","fillStyle","beginPath","PI","elementId","getElementById","getContext","setInterval","gameDraw","window","onload"],"mappings":"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","file":"what03.min.js","sourcesContent":["let self = this;\r\nthis.pressKey = null;\r\nthis.keymap = Keyboard.Keymap;\r\n\r\n// Keydown Event\r\ndocument.onkeydown = function(event) {\r\n    self.pressKey = event.which;\r\n};\r\n\r\n// Get Key\r\nthis.getKey = function() {\r\n    return this.keymap[this.pressKey];\r\n};\r\n\r\n\r\n/**\r\n * Game Component Stage\r\n */\r\nComponent.Stage = function(canvas, conf) {\r\n\r\n    // Sets\r\n    this.keyEvent = new Keyboard.ControllerEvents();\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    this.length = [];\r\n    this.food = {};\r\n    this.score = 0;\r\n    this.direction = 'right';\r\n    this.conf = {\r\n        cw: 10,\r\n        size: 5,\r\n        fps: 1000\r\n    };\r\n\r\n    // Merge Conf\r\n    if (typeof conf == 'object') {\r\n        for (var key in conf) {\r\n            if (conf.hasOwnProperty(key)) {\r\n                this.conf[key] = conf[key];\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Game Component Snake\r\n */\r\nComponent.Snake = function(canvas, conf) {\r\n\r\n    // Game Stage\r\n    this.stage = new Component.Stage(canvas, conf);\r\n\r\n    // Init Snake\r\n    this.initSnake = function() {\r\n\r\n        // Itaration in Snake Conf Size\r\n        for (let i = 0; i < this.stage.conf.size; i++) {\r\n\r\n            // Add Snake Cells\r\n            this.stage.length.push({ x: i, y: 0 });\r\n        }\r\n    };\r\n\r\n    // Call init Snake\r\n    this.initSnake();\r\n\r\n    // Init Food  \r\n    this.initFood = function() {\r\n\r\n        // Add food on stage\r\n        this.stage.food = {\r\n            x: Math.round(Math.random() * (this.stage.width - this.stage.conf.cw) / this.stage.conf.cw),\r\n            y: Math.round(Math.random() * (this.stage.height - this.stage.conf.cw) / this.stage.conf.cw),\r\n        };\r\n    };\r\n\r\n    // Init Food\r\n    this.initFood();\r\n\r\n    // Restart Stage\r\n    this.restart = function() {\r\n        this.stage.length = [];\r\n        this.stage.food = {};\r\n        this.stage.score = 0;\r\n        this.stage.direction = 'right';\r\n        this.stage.keyEvent.pressKey = null;\r\n        this.initSnake();\r\n        this.initFood();\r\n    };\r\n};\r\n\r\n/**\r\n * Game Draw\r\n */\r\nGame.Draw = function(context, snake) {\r\n\r\n    // Draw Stage\r\n    this.drawStage = function() {\r\n\r\n        // Check Keypress And Set Stage direction\r\n        let keyPress = snake.stage.keyEvent.getKey();\r\n        if (typeof(keyPress) != 'undefined') {\r\n            snake.stage.direction = keyPress;\r\n        }\r\n\r\n        // Draw White Stage\r\n        context.fillStyle = \"white\";\r\n        context.fillRect(0, 0, snake.stage.width, snake.stage.height);\r\n\r\n        // Snake Position\r\n        let nx = snake.stage.length[0].x;\r\n        let ny = snake.stage.length[0].y;\r\n\r\n        // Add position by stage direction\r\n        switch (snake.stage.direction) {\r\n            case 'right':\r\n                nx++;\r\n                break;\r\n            case 'left':\r\n                nx--;\r\n                break;\r\n            case 'up':\r\n                ny--;\r\n                break;\r\n            case 'down':\r\n                ny++;\r\n                break;\r\n        }\r\n\r\n        // Check Collision\r\n        if (this.collision(nx, ny) == true) {\r\n            snake.restart();\r\n            return;\r\n        }\r\n\r\n        // Logic of Snake food\r\n        if (nx == snake.stage.food.x && ny == snake.stage.food.y) {\r\n            let tail = { x: nx, y: ny };\r\n            snake.stage.score++;\r\n            snake.initFood();\r\n        } else {\r\n            let tail = snake.stage.length.pop();\r\n            tail.x = nx;\r\n            tail.y = ny;\r\n        }\r\n        snake.stage.length.unshift(tail);\r\n\r\n        // Draw Snake\r\n        for (let i = 0; i < snake.stage.length.length; i++) {\r\n            let cell = snake.stage.length[i];\r\n            this.drawCell(cell.x, cell.y);\r\n        }\r\n\r\n        // Draw Food\r\n        this.drawCell(snake.stage.food.x, snake.stage.food.y);\r\n\r\n        // Draw Score\r\n        context.fillText('Score: ' + snake.stage.score, 5, (snake.stage.height - 5));\r\n    };\r\n\r\n    // Draw Cell\r\n    this.drawCell = function(x, y) {\r\n        context.fillStyle = 'rgb(170, 170, 170)';\r\n        context.beginPath();\r\n        context.arc((x * snake.stage.conf.cw + 6), (y * snake.stage.conf.cw + 6), 4, 0, 2 * Math.PI, false);\r\n        context.fill();\r\n    };\r\n\r\n    // Check Collision with walls\r\n    this.collision = function(nx, ny) {\r\n        if (nx == -1 || nx == (snake.stage.width / snake.stage.conf.cw) || ny == -1 || ny == (snake.stage.height / snake.stage.conf.cw)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Game Snake\r\n */\r\nGame.Snake = function(elementId, conf) {\r\n\r\n    // Sets\r\n    let canvas = document.getElementById(elementId);\r\n    let context = canvas.getContext(\"2d\");\r\n    let snake = new Component.Snake(canvas, conf);\r\n    let gameDraw = new Game.Draw(context, snake);\r\n\r\n    // Game Interval\r\n    setInterval(function() { gameDraw.drawStage(); }, snake.stage.conf.fps);\r\n};\r\n\r\n\r\n/**\r\n * Window Load\r\n */\r\nwindow.onload = function() {\r\n    var snake = new Game.Snake('stage', { fps: 100, size: 4 });\r\n};"]}